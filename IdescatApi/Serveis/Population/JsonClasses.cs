// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

// rename Welcome type to ParsedJsonPopulation and more modifications
using IdescatApi.Serveis;

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.IO;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Feed
    {
        [JsonProperty("opensearch:Query")]
        public OpensearchQuery OpensearchQuery { get; set; }

        [JsonProperty("xmlns:cross")]
        public Uri XmlnsCross { get; set; }

        [JsonProperty("author")]
        public Author Author { get; set; }

        [JsonProperty("link")]
        public List<LinkElement> Link { get; set; }

        [JsonProperty("title")]
        public Subtitle Title { get; set; }

        [JsonProperty("opensearch:startIndex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OpensearchStartIndex { get; set; }

        [JsonProperty("opensearch:totalResults")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OpensearchTotalResults { get; set; }

        [JsonProperty("entry")]
        public List<Entry> Entry { get; set; }

        [JsonProperty("xmlns")]
        public Uri Xmlns { get; set; }

        [JsonProperty("subtitle")]
        public Subtitle Subtitle { get; set; }

        [JsonProperty("opensearch:itemsPerPage")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OpensearchItemsPerPage { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("xmlns:opensearch")]
        public Uri XmlnsOpensearch { get; set; }
    }

    public partial class Author
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("uri")]
        public Uri Uri { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("cross:DataSet")]
        public CrossDataSet CrossDataSet { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public EntryLink Link { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("category")]
        public List<Category> Category { get; set; }

        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("content")]
        public Subtitle Content { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("term")]
        public string Term { get; set; }    
    }

    public partial class Subtitle
    {
        [JsonProperty("xml:lang")]
        public string XmlLang { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }
    }

    public partial class CrossDataSet
    {
        [JsonProperty("cross:Section")]
        public CrossSection CrossSection { get; set; }
    }

    public partial class CrossSection
    {
        [JsonProperty("AREA")]
        public string Area { get; set; }

        [JsonProperty("cross:Obs")]
        public List<CrossOb> CrossObs { get; set; }

        [JsonProperty("FREQ")]
        public Freq Freq { get; set; }

        [JsonProperty("DECIMALS")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Decimals { get; set; }

        [JsonProperty("UNIT_MULT")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UnitMult { get; set; }

        [JsonProperty("TIME_PERIOD")]
        public DateTimeOffset TimePeriod { get; set; }
    }

    public partial class CrossOb
    {
        [JsonProperty("OBS_STATUS")]
        public Freq ObsStatus { get; set; }

        [JsonProperty("SEX")]
        public Sex Sex { get; set; }

        [JsonProperty("OBS_VALUE")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ObsValue { get; set; }
    }

    public partial class EntryLink
    {
        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class LinkElement
    {
        [JsonProperty("rel")]
        public string Rel { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class OpensearchQuery
    {
        [JsonProperty("startPage")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StartPage { get; set; }

        [JsonProperty("role")]
        public string Role { get; set; }

        [JsonProperty("searchTerms")]
        public string SearchTerms { get; set; }
    }

    public enum Freq { A };

    public enum Sex { F, M, T };

    public static class Serialize
    {
        public static string ToJson(this ParsedJsonPopulation self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {

        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FreqConverter.Singleton,
                SexConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class FreqConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Freq) || t == typeof(Freq?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "A")
            {
                return Freq.A;
            }
            throw new Exception("Cannot unmarshal type Freq");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Freq)untypedValue;
            if (value == Freq.A)
            {
                serializer.Serialize(writer, "A");
                return;
            }
            throw new Exception("Cannot marshal type Freq");
        }

        public static readonly FreqConverter Singleton = new FreqConverter();
    }

    internal class SexConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sex) || t == typeof(Sex?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "F":
                    return Sex.F;
                case "M":
                    return Sex.M;
                case "T":
                    return Sex.T;
            }
            throw new Exception("Cannot unmarshal type Sex");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sex)untypedValue;
            switch (value)
            {
                case Sex.F:
                    serializer.Serialize(writer, "F");
                    return;
                case Sex.M:
                    serializer.Serialize(writer, "M");
                    return;
                case Sex.T:
                    serializer.Serialize(writer, "T");
                    return;
            }
            throw new Exception("Cannot marshal type Sex");
        }

        public static readonly SexConverter Singleton = new SexConverter();
    }
}